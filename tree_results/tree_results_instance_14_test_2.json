{
    "problem_instance": {
        "examples": [
            {
                "expression1": "(1/(a + b)) + (1/(x + y))",
                "expression2": "(a + b)^{-1} + (x + y)^{-1}",
                "result": "passed"
            },
            {
                "expression1": "1/(x * (y + z))",
                "expression2": "x^{-1} * (y + z)^{-1}",
                "result": "passed"
            },
            {
                "expression1": "1/((a + b) * (x + y))",
                "expression2": "(a + b)^{-1} * (x + y)^{-1}",
                "result": "passed"
            },
            {
                "expression1": "(1/(a + 1) + (1/(b + 1)))",
                "expression2": "(a + 1)^{-1} + (b + 1)^{-1}",
                "result": "passed"
            },
            {
                "expression1": "1/(x + 1) + (y + z) + (1/(x + y))",
                "expression2": "(x + 1)^{-1} + (y + z) + (x + y)^{-1}",
                "result": "passed"
            }
        ],
        "description": "Reduce the number of parentheses/Write reciprocal as x^{-1}\n1/((a + b) * (x + y)) -> (a + b)^{-1} * (x + y)^{-1}"
    },
    "test_index": 2,
    "branching_factor": 5,
    "tree": {
        "null": [
            "1/((a + b) * (x + y))"
        ],
        "1/((a + b) * (x + y))": [
            "-1/(-1*(a+b)*(x+y))",
            "-1/(((a+b)*(x+y))*(-1))"
        ],
        "-1/(-1*(a+b)*(x+y))": [
            "1/((a+b)*(x+y))"
        ],
        "-1/(((a+b)*(x+y))*(-1))": [
            "1/(((a+b)*(x+y)))",
            "-1/(-1*((a+b)*(x+y)))"
        ],
        "1/((a+b)*(x+y))": [
            "1/(-1*-(a+b)*(x+y))",
            "-1/((-1)*(a+b)*(x+y))"
        ],
        "1/(((a+b)*(x+y)))": [
            "1/(-1*-((a+b)*(x+y)))"
        ]
    },
    "scores": {
        "1/((a + b) * (x + y))": [
            1,
            1
        ],
        "-1/(-1*(a+b)*(x+y))": [
            1,
            5
        ],
        "-1/(((a+b)*(x+y))*(-1))": [
            1,
            5
        ],
        "1/((a+b)*(x+y))": [
            5,
            3
        ],
        "1/(((a+b)*(x+y)))": [
            5,
            3
        ],
        "-1/(-1*((a+b)*(x+y)))": [
            2,
            5
        ],
        "1/(-1*-(a+b)*(x+y))": [
            2,
            5
        ],
        "-1/((-1)*(a+b)*(x+y))": [
            2,
            5
        ],
        "1/(-1*-((a+b)*(x+y)))": [
            2,
            5
        ]
    },
    "averages": {
        "1/((a + b) * (x + y))": 1.0,
        "-1/(-1*(a+b)*(x+y))": 3.0,
        "-1/(((a+b)*(x+y))*(-1))": 3.0,
        "1/((a+b)*(x+y))": 4.0,
        "1/(((a+b)*(x+y)))": 4.0,
        "-1/(-1*((a+b)*(x+y)))": 3.5,
        "1/(-1*-(a+b)*(x+y))": 3.5,
        "-1/((-1)*(a+b)*(x+y))": 3.5,
        "1/(-1*-((a+b)*(x+y)))": 3.5
    },
    "tree_stats": {
        "total_nodes": 9,
        "max_pi_score": 5,
        "max_h_score": 5,
        "max_avg_score": 4.0,
        "average_pi_score": 2.3333333333333335,
        "average_h_score": 4.111111111111111,
        "average_avg_score": 3.2222222222222223,
        "max_depth": 3,
        "nodes_per_depth": {
            "0": 1,
            "1": 2,
            "2": 3,
            "3": 3
        },
        "average_score_per_depth": {
            "0": 1.0,
            "1": 3.0,
            "2": 3.8333333333333335,
            "3": 3.5
        },
        "average_pi_score_per_depth": {
            "0": 1.0,
            "1": 1.0,
            "2": 4.0,
            "3": 2.0
        },
        "average_h_score_per_depth": {
            "0": 1.0,
            "1": 5.0,
            "2": 3.6666666666666665,
            "3": 5.0
        }
    }
}